#ifndef __WIT_H__
#define __WIT_H__

#include "main.h"
#include "usart.h"

// ×´Ì¬ï¿½ï¿½×´Ì¬ï¿½ï¿½ï¿½ï¿½
typedef enum {
    WIT_STATE_WAIT_HEADER,   // ï¿½È´ï¿½Ö¡Í·×´Ì¬
    WIT_STATE_RECEIVING,      // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬
    WIT_STATE_COMPLETE        // ï¿½ï¿½É½ï¿½ï¿½ï¿½×´Ì?
} WitState;

// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý½á¹¹ï¿½ï¿½
typedef struct {
    float roll;      // ï¿½ï¿½×ªï¿½ï¿½ (ï¿½ï¿½)
    float pitch;     // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ (ï¿½ï¿½)
    float yaw;       // Æ«ï¿½ï¿½ï¿½ï¿½ (ï¿½ï¿½)
    float gyro[3];   // ï¿½ï¿½ï¿½Ù¶ï¿½ [x, y, z] (ï¿½ï¿½/ï¿½ï¿½)
    float accel[3];  // ï¿½ï¿½ï¿½Ù¶ï¿½ [x, y, z] (g)
} SensorData;

extern SensorData wit_data;

typedef enum{
	STATE_WAIT_HEADER1,
	STATE_WAIT_HEADER2,
	STATE_RECEIVE_DATA,
	STATE_WAIT_FOOTER1,
	STATE_WAIT_FOOTER2
} UART_State;

extern UART_State rx_state;
void WIT_callback(UART_HandleTypeDef *huart);



void WitNormalDataProcess(uint8_t *data, uint16_t size);
void WIT_callback(UART_HandleTypeDef *huart);

extern uint8_t rx_buffer2;






#endif 
